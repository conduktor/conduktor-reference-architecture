gateway:
  replicas: 3
  resources:
    # reduce resource requests for example purpose.
    requests:
      cpu: 0.5
      memory: 1Gi

  secretRef: "gateway-secrets"
  env:
    # # Gateway server general configuration
    # LOG4J2_APPENDER_LAYOUT: "json"
    # LOG4J2_ORG_APACHE_KAFKA_LEVEL: debug
    # LOG4J2_IO_CONDUKTOR_LEVEL: "DEBUG"
    # LOG4J2_IO_CONDUKTOR_PROXY_NETWORK_LEVEL: "DEBUG" # to debug SNI routing and other network issues


    #### Backend kafka configuration
    ##
    GATEWAY_UPSTREAM_CONNECTION_POOL_TYPE: "ROUND_ROBIN" # multiplexing optimization
    KAFKA_BOOTSTRAP_SERVERS: "kafka-controller-0.kafka-controller-headless.cdk-deps.svc.cluster.local:9092"
    KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
    KAFKA_SASL_MECHANISM: "PLAIN"

    # Truststore for Gateway kafka client -> Kafka brokers
    KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/conduktor/tls/truststore/truststore.jks
    KAFKA_SSL_TRUSTSTORE_TYPE: "JKS"

    #### Gateway Kafka proxy configuration for clients
    ##
    GATEWAY_ADVERTISED_HOST: "gateway.conduktor.localhost" # external hostname of the gateway

    # SNI routing configuration
    GATEWAY_ROUTING_MECHANISM: host
    GATEWAY_ADVERTISED_SNI_PORT: "9092"
    GATEWAY_SNI_HOST_SEPARATOR: "." # e.g. "brokermain0" + "." + "gateway.conduktor.localhost"
    GATEWAY_FEATURE_FLAGS_INTERNAL_LOAD_BALANCING: "false" # https://docs.conduktor.io/gateway/reference/load-balancing/#external-load-balancing

    GATEWAY_SECURITY_PROTOCOL: "SASL_SSL"
    GATEWAY_ACL_ENABLED: "true"
    # console-sa will connect over SASL/PLAIN and app-1 will connect over OIDC
    GATEWAY_SUPER_USERS: "console-sa;app-1"
    GATEWAY_OAUTH_JWKS_URL: "https://keycloak.cdk-deps.svc.cluster.local/realms/conduktor-realm/protocol/openid-connect/certs"
    GATEWAY_OAUTH_EXPECTED_ISSUER: "https://oidc.localhost/realms/conduktor-realm"
    GATEWAY_OAUTH_EXPECTED_AUDIENCES: "[account]"
    GATEWAY_OAUTH_SUB_CLAIM_NAME: "azp"

    # # Keystore for Gateway TLS certificate
    # GATEWAY_SSL_KEY_STORE_PATH: "/etc/gateway/tls/keystore.jks" # set by tls.enable
    GATEWAY_SSL_KEY_TYPE: "JKS"

    # # Truststore for mTLS authentication of Gateway clients
    # GATEWAY_SSL_TRUST_STORE_PATH: /etc/conduktor/tls/truststore/truststore.jks

    # # Gateway HTTP API
    # # Gateway HTTPS configuration. Uncomment if you want to use TLS passthrough
    GATEWAY_HTTPS_KEY_STORE_PATH: "/etc/gateway/tls/keystore.jks"
    # # Truststore for mTLS authentication of Gateway clients
    # GATEWAY_HTTPS_TRUST_STORE_PATH: "/etc/conduktor/tls/truststore/truststore.jks"

  volumes:
    # Mount truststore secrets for kafka and http client
    - name: truststore
      secret:
        secretName: bundle-truststore # secret with truststore.jks containing kafka and schema registry certificates

  volumeMounts:
    # Mount truststore secrets for kafka and http client
    - name: truststore
      mountPath: /etc/conduktor/tls/truststore
      readOnly: true

  portRange:
    start: 9092
    count: 1
  admin:
    port: 8888
    securedMetrics: false

service:
  external:
    enable: true
    type: LoadBalancer
    admin: true

# Mount keystore for TLS
tls:
  enable: true
  secretRef: "gateway-tls-secret"
  keystoreKey: keystore.jks
  keystoreFile: keystore.jks

metrics:
  prometheus:
    enable: true
  grafana:
    enable: true
    folder: "Conduktor"
    labels:
      grafana_dashboard: "1" # for grafana sidecar auto-discovery
    namespace: "monitoring"
    datasources:
      prometheus: prometheus
      loki: loki

# Expose admin REST API through an ingress
ingress:
  enabled: true
  ingressClassName: nginx
  hostname: gateway.conduktor.localhost
  tls: true
  annotations:
    cert-manager.io/cluster-issuer: local-ca-issuer
    kubernetes.io/ingress.class: nginx
    # redirect TLS traffic directly to the Gateway container to handle TLS handshake
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
